<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>NYC Apartment Hunt</title>
        <script src="https://d3js.org/d3.v5.min.js"></script>
        <script src="https://d3js.org/topojson.v2.min.js"></script>
        <meta name="viewport" content="width=device-width, initial-scale=1">
    </head>
    <style>
        .svgs {
            display: flex;
        }
        body {
            font-family: Century Gothic, CenturyGothic, AppleGothic, sans-serif;
        }
        h1 {
            font-size: 30px;
            margin-top: 20px;
        }
        h1,p {
            margin-left: 20px;
            margin-right: 20px;
        }
        p {
            font-size: 20px;
        }
        .labels {
            display:flex;
            justify-content: space-between;
            max-width:fit-content;
            margin: 10px;
        }
        .labels p {
            font-size: 14px;
        }
    </style>
    <body>
    <h1>NYC Apartment Hunting</h1>
    <p>Check out the rental market in each of Manhattan's neighborhoods!</p>
    <div class="labels">
        <p class="expensive">More pricey</p> 
        <p class="cheap">More affordable</p>
    </div>
    <canvas class="scale" width=300 height=20 id="scale" style="border:1px solid #ccc"></canvas>
    <div class="svgs">
    <svg id="svg" height="700" width="500" style="background: #fff;" ></svg>
    <svg id="panel" height="700" width="400" style="background: #fff; margin-top:50px" ></svg>
    </div>
        <script>
            //set up svg
            var svg = d3.select('svg'),
            margin = {top: 0, right: 0, bottom: 0, left: 0},
            width = +svg.attr('width') - margin.left - margin.right,
            height = +svg.attr('height') - margin.top - margin.bottom,
            g = svg.append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

            //load data
            const nycMap = async function() {
                const nyc = await d3.json("nyc.geojson");
                const csv = await d3.csv("nyc.csv");

            //filter for manhattan excluding non liveable places
            const excludedNeighborhoods = ["Central Park", "Randall's Island", "Governors Island", "Ellis Island", "Liberty Island", "Marble Hill"];
            const filtered_nyc = nyc.features
                .filter(feature => feature.properties.borough === "Manhattan") //just show manhattan
                .filter(feature => !excludedNeighborhoods.includes(feature.properties.neighborhood));

            //make it back into feature collection 
            var manhattan = {
                type: "FeatureCollection",
                features: filtered_nyc
            };

            //map data together by neighborhood 
            let rentData = {};
                csv.forEach(d => {rentData[d.neighborhood] = +d.rent;});

                manhattan.features.forEach(feature => {
                    feature.properties.rent = rentData[feature.properties.neighborhood];

                    const csvRow = csv.find(d => d.neighborhood === feature.properties.neighborhood);
                    feature.properties.csvData = csvRow;
                });
            
            //make map
            console.log(manhattan.features);
            var projection = d3.geoMercator().fitSize([width, height], manhattan) ;
            var path = d3.geoPath().projection(projection);

            //make scales
            let rents = manhattan.features.map(feature => feature.properties.rent).filter(rent => rent);
            let colorScale = d3.scaleSequential(d3.interpolateCool).domain(d3.extent(rents).reverse());
            
            console.log(manhattan)
            let neighborhoods = svg.selectAll(".neighborhood").data(manhattan.features)
                .enter()
                .append("path")
                .attr("class", "neighborhood")
                .attr("fill", d => d.properties.rent ? colorScale(d.properties.rent) : '#ccc') 
                .attr("d", path);

            //interactivity
            neighborhoods.on("mouseover", function(d, i) {
                const neighborhood = d.properties.neighborhood;
                const rent = d.properties.rent;
                const ndata = d.properties.csvData;
                d3.select("#panel").selectAll("*").remove();

                d3.select("#panel").append("text")
                    .attr("x", 10)
                    .attr("y", 40)
                    .attr("fill", "black")
                    .attr("class", "panel-text")
                    .attr("font-size", 25)
                    .text(neighborhood);

                d3.select("#panel").append("text")
                    .attr("x", 10)
                    .attr("y", 65)
                    .attr("fill", "black")
                    .attr("class", "panel-text")
                    .attr("font-size", 17)
                    .text(`Average Rent: $${Math.round(rent)}`);

                d3.select(this)
                    .transition().duration(200)
                    .attr("stroke","black")
                    .attr("stroke-width", 2);

                d3.select("#panel").append("text")
                    .attr("x", 10)
                    .attr("y", 270)
                    .attr("fill", "black")
                    .attr("class", "panel-text")
                    .attr("font-size", 17)
                    .text(`Average size: ${Math.round(ndata.size_sqft)} sqft`);

                d3.select("#panel").append("text")
                    .attr("x", 10)
                    .attr("y", 300)
                    .attr("fill", "black")
                    .attr("class", "panel-text")
                    .attr("font-size", 17)
                    .text(`Average bedrooms: ${Math.round(ndata.bedrooms)}`);
                
                d3.select("#panel").append("text")
                    .attr("x", 10)
                    .attr("y", 330)
                    .attr("fill", "black")
                    .attr("class", "panel-text")
                    .attr("font-size", 17)
                    .text(`Average bathrooms: ${Math.round(ndata.bathrooms)}`);

                d3.select("#panel").append("text")
                    .attr("x", 10)
                    .attr("y", 360)
                    .attr("fill", "black")
                    .attr("class", "panel-text")
                    .attr("font-size", 17)
                    .text(`Average building age: ${Math.round(ndata.building_age_yrs)} years`);
                
                d3.select("#panel").append("text")
                    .attr("x", 10)
                    .attr("y", 390)
                    .attr("fill", "black")
                    .attr("class", "panel-text")
                    .attr("font-size", 17)
                    .text(`Average walk to subway: ${Math.round(ndata.min_to_subway)} minutes`);

                //add chart
                const avg_rent = 4584;

                const barData = [
                    {label: "Average Manhattan Rent", value: avg_rent},
                    {label: "Neighborhood Rent", value: rent}
                ];

                const rent_extent = 8500; //max rent in df
                const barScale = d3.scaleLinear()
                                .domain([0, rent_extent])
                                .range([200, 0]);

                const bars = d3.select("#panel").selectAll(".bar")
                            .data(barData, data => data.label);

                bars.enter().append("rect")
                    .attr("class", "bar")
                    .attr("x", 10) 
                    .attr("y", (d, i) => 100 + i * (60))
                    .attr("height", 30)
                    .attr("width", d => 200 - barScale(d.value))
                    .attr("fill", d => colorScale(d.value));

                bars.enter().append("text")
                    .text(d => d.label) 
                    .attr("x", 10) 
                    .attr("y", (d, i) => 150 + i * (60)) 
                    .attr("font-size", "12px")
                    .attr("fill", "black");

                //add percentage scales
                const scaleData = [
                    {label: "of apartments have a doorman", value: ndata.has_doorman},
                    {label: "of apartments have a elevator", value: ndata.has_elevator},
                    {label: "of apartments have a washer/dryer", value: ndata.has_washer_dryer}
                ];

                const percentScale = d3.scaleLinear()
                                .domain([0, 1])
                                .range([0, 200]);

                const scales = d3.select("#panel").selectAll(".percentage-bar")
                    .data(scaleData, data => data.label);
                
                scales.enter().append("rect")
                    .attr("class", "percentage-bar")
                    .attr("x", 10) 
                    .attr("y", (d, i) => 420 + i * (40))
                    .attr("height", 15)
                    .attr("width", d => percentScale(d.value))
                    .attr("fill", '#ccc');

                scales.enter().append("text")
                    .text(d => d.label) 
                    .attr("x", 10) 
                    .attr("y", (d, i) => 450 + i * (40)) 
                    .attr("font-size", "12px")
                    .attr("fill", "black");

                if (d => (d.value) != 0) {
                scales.enter().append("text")
                    .text(d => d3.format(".0%")(d.value) )
                    .attr("x", d => percentScale(d.value)+20) 
                    .attr("y", (d, i) => 430 + i * (40))
                    .attr("font-size", "12px")
                    .attr("fill", "black");
                }
                
            });

            neighborhoods.on("mouseout", function(d, i) {
                d3.select("#panel").selectAll("*").remove();

                d3.select(this)
                    .transition().duration(200)
                    .attr("stroke","");
            });

            //add color key
            function createColorGradient( canvasElement, colorScale ) { //from 3300 final
  
            const width = canvasElement.attr("width");
            const height = canvasElement.attr("height");
            colorScale = colorScale.copy().domain([0, width]);

            const context = canvasElement.node().getContext('2d');
            context.clearRect(0, 0, width, height);

            for (var x=0; x<width-1; x++){
            const color = colorScale(x);
            context.fillStyle = color;
            context.beginPath();
            context.rect(x, 0, x+1, height);
            context.fill();
            } }

            createColorGradient( d3.select("canvas#scale"), d3.scaleSequential(d3.interpolateCool) );

            }
            nycMap();
        </script>
    </body>
</html>